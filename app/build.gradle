plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dk.nstack.translation.plugin'
    id 'dagger.hilt.android.plugin'
    alias(libs.plugins.kotlin.serialization)
}

translation {
    appId = keys.appId
    apiKey = keys.apiKey
    acceptHeader = keys.acceptHeader
}

android {
    compileSdk 33
    flavorDimensions += "default"
    defaultConfig {
        applicationId "com.monstarlab"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        manifestPlaceholders = [
                appId : keys.appId,
                apiKey: keys.apiKey
        ]
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        viewBinding true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        dev {
            dimension "default"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [
                    APP_NAME: "MonstarlabDev",
                    env     : "staging"
            ]
            buildConfigField "String", "API_URL", "\"https://reqres.in/api/\""
        }
        staging {
            dimension "default"
            applicationIdSuffix ".staging"
            //signingConfig signingConfigs.staging
            manifestPlaceholders = [
                    APP_NAME: "MonstarlabStaging",
                    env     : "staging"
            ]
            buildConfigField "String", "API_URL", "\"https://reqres.in/api/\""
        }
        production {
            dimension "default"
            //signingConfig signingConfigs.production
            manifestPlaceholders = [
                    APP_NAME: "Monstarlab",
                    env     : "production"
            ]
            buildConfigField "String", "API_URL", "\"https://reqres.in/api/\""
        }
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = libs.versions.compose.compiler.get()
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = 11
    }
    namespace 'com.monstarlab'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

dependencies {

    implementation libs.kotlin

    implementation libs.kotlin.coroutines.android
    implementation libs.kotlin.coroutines.jdk
    implementation libs.kotlin.serialization.json
    implementation libs.android.fragment
    implementation libs.android.core
    implementation libs.android.appcompat
    implementation libs.android.material
    implementation libs.android.contraint.layout
    testImplementation libs.junit
    androidTestImplementation libs.junit.android
    androidTestImplementation libs.espresso.core


    implementation libs.hilt.android
    kapt libs.hilt.compiler


    implementation(libs.retrofit.converter)
    implementation(libs.retrofit)
    implementation(libs.okhttp.logger)

    implementation(libs.android.navigation.fragment)
    implementation(libs.android.navigation.ui)

    implementation(libs.android.lifecycle.core)
    implementation(libs.android.lifecycle.runtime)
    implementation(libs.android.lifecycle.common)
    implementation(libs.android.lifecycle.viewmodel)
    implementation(libs.android.lifecycle.livedata)
    implementation(libs.android.lifecycle.runtime.compose)

    implementation(libs.android.datastore.preferences)


    // Compose
    implementation platform(libs.android.compose.bom)
    implementation(libs.android.compose.material)
    debugImplementation(libs.android.compose.ui.tooling)

    implementation libs.accompanist.pager
    implementation libs.accompanist.systemuicontroller
    implementation libs.accompanist.placeholder.material

    implementation libs.nstack
    implementation libs.timber

}
